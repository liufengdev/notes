

符号(sign) 阶码(exponent) 尾数(significand)
浮点数能够使用使用整数排序函数来进行排序

程序计数器
整数寄存器
条件码寄存器
向量寄存器

传送指令的两个操作数不能都指向内存位置。将一个值从一个内存位置复制到另一个内存位置需要两条指令

根据x86_64惯例，任何为寄存器生成32位值的指令都会把该寄存器的高位部分置成0，即movl指令以寄存器作为目的时，它会把该寄存器的高4位字节
设置为0

C语言中的指针就是地址，间接引用指针就是将该指针放在一个寄存器中，然后在内存中使用这个寄存器
局部变量通常保存在寄存器中，而不是内存中

条件数据传送提供了一种用条件控制转移来实现条件操作的替代策略。它们只能用于非常受限的情况，在分支的两个表达式都很容易计算时。编译器必
须考虑浪费的计算和由于分支预测错误所造成的性能处罚之间的相对性能。

使用跳转表(jump table)的优点是执行开关语句的时间与开关情况的数量无关。

过程是软件中一种很重要的抽象，它提供了一种封装代码的方式，用一组指定的参数和一个可选的返回值实现了了某种功能。传递控制-传递数据-分配
和释放内存

x86_64中，可以通过寄存器最多传递6个整型参数，超出的部分要通过栈来传递。

指针运算出来的值会根据该指针引用的数据类型的大小进行伸缩。 例如 &E[i] - E 结果为 i

结构: C语言的struct声明创建一个数据类型，将可能不同类型的对象聚合到一个对象中，用名字来引用结构的各个组成部分。结构的所有组成部分都存放
在内存中的一段连续的区域内，而指向结构的指针就是结构第一个字节的地址。

结构的各个字段的选取完全是在编译时处理的，机器代码不包含关于字段声明或字段名字的信息。

对抗缓冲区溢出攻击：
> 1、栈随机化 地址空间布局随机化 Address-Space Layout 
Randomization。采用ASLR，每次运行时程序的不同部分，包括程序代码、库嗲吗、栈、全局变量和堆数据，都会被加载到内存的不同区域。
> 2、栈破坏检测 在栈帧中任何局部缓冲区与栈状态之间存储一个特殊的canary值（guard 
value）。在恢复寄存器状态和从函数返回之前，检查这个值是否被该函数的某个操作或该函数调用的某个函数的某个操作改变了。
> 3、限制可执行代码区域 限制哪些内存区域能够存放可执行代码[虚拟内存空间控制内存访问权限]